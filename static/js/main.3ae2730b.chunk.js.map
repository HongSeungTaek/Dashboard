{"version":3,"sources":["component/charts/Pie.js","dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["data","labels","datasets","backgroundColor","hoverBackgroundColor","PieChart","react_default","a","createElement","es","React","Component","label","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","LineChart","ref","this","refs","chart","chartInstance","console","log","Dashboard","props","header","className","Pie","Dashboard_LineChart","App","dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAIMA,EAAO,CACZC,OAAQ,CACP,MACA,OACA,UAEDC,SAAU,CAAC,CACVF,KAAM,CAAC,IAAK,GAAI,KAChBG,gBAAiB,CACjB,UACA,UACA,WAEAC,qBAAsB,CACtB,UACA,UACA,cAcaC,mLANX,OACEC,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKT,KAAMA,WAJMU,IAAMC,WCgB7B,IAAIX,EAAO,CACTC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CACR,CACEU,MAAO,mBACPC,MAAM,EACNC,YAAa,GACbX,gBAAiB,uBACjBY,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChB5B,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAK/B6B,mLAGF,OACMvB,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMqB,IAAI,QAAQ9B,KAAMA,gDAIZ,IACVE,EAAa6B,KAAKC,KAAKC,MAAMC,cAAclC,KAA3CE,SACRiC,QAAQC,IAAIlC,EAAS,GAAGF,aAVJU,IAAMC,WAcf0B,EA7Ef,WACE,IAAIC,EACS,CACTC,OAAQ,aAFRD,EAIU,CACVC,OAAQ,cAKZ,OACEjC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,gBACblC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,SACblC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,QACblC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,eAAeF,EAAgBC,QAC9CjC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,aACblC,EAAAC,EAAAC,cAACiC,EAAD,SAINnC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,SACblC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,QACblC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,eAAeF,EAAiBC,QAC/CjC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,aACblC,EAAAC,EAAAC,cAACkC,EAAD,SAINpC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,aCrBRG,MARf,WACE,OACErC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAACoC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ae2730b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\n\r\nconst data = {\r\n\tlabels: [\r\n\t\t'Red',\r\n\t\t'Blue',\r\n\t\t'Yellow'\r\n\t],\r\n\tdatasets: [{\r\n\t\tdata: [300, 50, 100],\r\n\t\tbackgroundColor: [\r\n\t\t'#FF6384',\r\n\t\t'#36A2EB',\r\n\t\t'#FFCE56'\r\n\t\t],\r\n\t\thoverBackgroundColor: [\r\n\t\t'#FF6384',\r\n\t\t'#36A2EB',\r\n\t\t'#FFCE56'\r\n\t\t]\r\n\t}]\r\n};\r\n\r\nclass PieChart extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Pie data={data} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default PieChart;","import React from 'react';\r\nimport './Dashboard.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport PieChart from '../component/charts/Pie';\r\n\r\nfunction Dashboard() {\r\n  let props = {\r\n    pie_chart: {\r\n      header: 'Pie Chart',\r\n    },\r\n    line_chart: {\r\n      header: 'Line Chart',\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"db-container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">{props.pie_chart.header}</div>\r\n            <div className=\"card-body\">\r\n              <PieChart/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">{props.line_chart.header}</div>\r\n            <div className=\"card-body\">\r\n              <LineChart/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-4\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nvar data = {\r\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n  datasets: [\r\n    {\r\n      label: 'My First dataset',\r\n      fill: false,\r\n      lineTension: 0.1,\r\n      backgroundColor: 'rgba(75,192,192,0.4)',\r\n      borderColor: 'rgba(75,192,192,1)',\r\n      borderCapStyle: 'butt',\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: 'miter',\r\n      pointBorderColor: 'rgba(75,192,192,1)',\r\n      pointBackgroundColor: '#fff',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 1,\r\n      pointHitRadius: 10,\r\n      data: [65, 59, 80, 81, 56, 55, 40]\r\n    }\r\n  ]\r\n};\r\n\r\nclass LineChart extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n          <Line ref=\"chart\" data={data} />\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { datasets } = this.refs.chart.chartInstance.data\r\n    console.log(datasets[0].data);\r\n  }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Dashboard from './dashboard/Dashboard';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}